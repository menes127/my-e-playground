<?xml version="1.0" encoding="UTF-8"?>
<b:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:b="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
                        http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.0.xsd">

	<http auto-config='true'>
		<custom-filter before="FILTER_SECURITY_INTERCEPTOR" ref="myFilter"/>
	</http>
	
	<!-- 一个自定义的filter，必须包含authenticationManager,accessDecisionManager,securityMetadataSource三个属性 -->
	<b:bean id="myFilter" class="com.menes.webapp.ch005.MyFilterSecurityInterceptor">
		<b:property name="authenticationManager" ref="authenticationManager"/>
		<b:property name="accessDecisionManager" ref="myAccessDecisionManagerBean"/>
		<b:property name="securityMetadataSource" ref="securityMetadataSource"/>
	</b:bean>
	
	<!-- 认证管理器，实现用户认证的入口 -->
	<authentication-manager alias="authenticationManager">
		<authentication-provider user-service-ref="myUserDetailService">
		</authentication-provider>
	</authentication-manager>
	<b:bean id="myUserDetailService" class="com.menes.webapp.ch005.MyUserDetailService" />
	
	<!-- 访问决策器，决定某个用户具有的角色，是否有足够的权限去访问某个资源 -->
	<b:bean id="myAccessDecisionManagerBean" class="com.menes.webapp.ch005.MyAccessDecisionManager" />
	
	
	<!-- 资源源数据定义，即定义某一资源可以被哪些角色访问 -->
	<b:bean id="securityMetadataSource" class="com.menes.webapp.ch005.MyInvocationSecurityMetadataSource" />


	
	<!-- gaomh
	<authentication-manager alias="authenticationManager">
		<authentication-provider>
			<jdbc-user-service data-source-ref="dataSource"
				users-by-username-query="select username,password,status as enabled
                                       from user
                                      where username=?"
				authorities-by-username-query="select u.username,r.name as authority
                                             from user u
                                             join user_role ur
                                               on u.id=ur.user_id
                                             join role r
                                               on r.id = ur.role_id
                                            where u.username=?" />
		</authentication-provider>
	</authentication-manager>
	 -->
	
	<!-- gaomh
	<b:bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<b:property name="driverClassName" value="org.hsqldb.jdbcDriver"></b:property>
	 -->
		<!-- In-Process (Standalone) Mode
		<b:property name="url" value="jdbc:hsqldb:res:/hsqldb/test"></b:property>
		-->
		<!-- Server Modes (Hsqldb Server) -->
	<!-- gaomh
		<b:property name="url" value="jdbc:hsqldb:hsql://localhost:9100/test"></b:property>
		<b:property name="username" value="sa"></b:property>
		<b:property name="password" value=""></b:property>
	</b:bean>
	 -->
</b:beans>
